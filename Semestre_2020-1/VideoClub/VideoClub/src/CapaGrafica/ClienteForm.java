/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CapaGrafica;

import CapaLogica.CarritoCompras;
import CapaLogica.Producto;
import CapaLogica.Usuario;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author mario
 */
public class ClienteForm extends javax.swing.JFrame {

    // cONTIENE UN CARIITO DE COMPRAS PARA ACTUALIZAR DATOS
    // ATRIBUTOS PAR SABER CUANTO SE PAGA
    public Double precioTotal = 0.0;
    public Double precioDesc = 0.0;
    public CarritoCompras carrito;
    /**
     * Creates new form ClienteForm
     */
    public ClienteForm(Usuario user) throws IOException, FileNotFoundException, ClassNotFoundException {
        initComponents();
        this.setLocationRelativeTo(null); // VENTENA EN CENTRO DE LA PANTALLA
        this.carrito = new CarritoCompras(user);
        this.listaProductos.setModel(this.carrito.actualizarJList());
        this.nombreLabel.setText(this.carrito.usuario.getNombre());
        this.nombrELabel.setText(this.carrito.usuario.getNombre());
        this.listaAlquilados.setModel(this.carrito.actualizarJListAlquilados());
        //System.out.println(user.alquilados.get(0).toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        alquilerPanel = new javax.swing.JPanel();
        listaPanelProCarrito = new javax.swing.JPanel();
        listaLabel12 = new javax.swing.JLabel();
        comprarBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resumeLabel = new javax.swing.JTextArea();
        listaPanelPro = new javax.swing.JPanel();
        listaLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        listaProductos = new javax.swing.JList<>();
        listaLabel8 = new javax.swing.JLabel();
        listaLabel9 = new javax.swing.JLabel();
        listaLabel10 = new javax.swing.JLabel();
        agregarBtn = new javax.swing.JButton();
        listaLabel11 = new javax.swing.JLabel();
        precioBtn = new javax.swing.JButton();
        listaPanelProCompra = new javax.swing.JPanel();
        listaLabel15 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        listaCarrito1 = new javax.swing.JList<>();
        listaLabel18 = new javax.swing.JLabel();
        listaLabel19 = new javax.swing.JLabel();
        eliminarBtn1 = new javax.swing.JButton();
        listaLabel20 = new javax.swing.JLabel();
        listaLabel21 = new javax.swing.JLabel();
        nombrELabel = new javax.swing.JLabel();
        fondopanel = new javax.swing.JLabel();
        devolucionesPanel = new javax.swing.JPanel();
        listaPanelPro1 = new javax.swing.JPanel();
        listaLabel14 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        listaAlquilados = new javax.swing.JList<>();
        listaLabel16 = new javax.swing.JLabel();
        listaLabel17 = new javax.swing.JLabel();
        listaLabel23 = new javax.swing.JLabel();
        devolverBtn = new javax.swing.JButton();
        listaLabel24 = new javax.swing.JLabel();
        nombreLabel = new javax.swing.JLabel();
        fondopanel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        alquilerPanel.setLayout(null);

        listaPanelProCarrito.setBackground(new java.awt.Color(0, 0, 0,90));

        listaLabel12.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel12.setText("Resumen");

        comprarBtn.setBackground(new java.awt.Color(204, 0, 204));
        comprarBtn.setText("Alquilar");
        comprarBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        comprarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprarBtnActionPerformed(evt);
            }
        });

        resumeLabel.setColumns(20);
        resumeLabel.setRows(5);
        jScrollPane1.setViewportView(resumeLabel);

        javax.swing.GroupLayout listaPanelProCarritoLayout = new javax.swing.GroupLayout(listaPanelProCarrito);
        listaPanelProCarrito.setLayout(listaPanelProCarritoLayout);
        listaPanelProCarritoLayout.setHorizontalGroup(
            listaPanelProCarritoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPanelProCarritoLayout.createSequentialGroup()
                .addGroup(listaPanelProCarritoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listaPanelProCarritoLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(listaLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(listaPanelProCarritoLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(listaPanelProCarritoLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(comprarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        listaPanelProCarritoLayout.setVerticalGroup(
            listaPanelProCarritoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPanelProCarritoLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(listaLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(comprarBtn)
                .addGap(16, 16, 16))
        );

        alquilerPanel.add(listaPanelProCarrito);
        listaPanelProCarrito.setBounds(370, 260, 300, 150);

        listaPanelPro.setBackground(new java.awt.Color(0, 0, 0,90));

        listaLabel7.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel7.setText("Lista de Productos en Stock");

        jScrollPane5.setViewportView(listaProductos);

        listaLabel8.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel8.setText("Codigo");

        listaLabel9.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel9.setText("Nombre");

        listaLabel10.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel10.setText("Existencia");

        agregarBtn.setBackground(new java.awt.Color(51, 204, 0));
        agregarBtn.setText("Agregar");
        agregarBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        listaLabel11.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel11.setText("Tipo");

        precioBtn.setBackground(new java.awt.Color(255, 255, 0));
        precioBtn.setText("Precios");
        precioBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        precioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listaPanelProLayout = new javax.swing.GroupLayout(listaPanelPro);
        listaPanelPro.setLayout(listaPanelProLayout);
        listaPanelProLayout.setHorizontalGroup(
            listaPanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPanelProLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(listaPanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(listaPanelProLayout.createSequentialGroup()
                        .addComponent(listaLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(listaLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(listaLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(listaLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(listaLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPanelProLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(listaPanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPanelProLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPanelProLayout.createSequentialGroup()
                        .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(precioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        listaPanelProLayout.setVerticalGroup(
            listaPanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPanelProLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(listaLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listaPanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaLabel8)
                    .addComponent(listaLabel9)
                    .addComponent(listaLabel10)
                    .addComponent(listaLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(agregarBtn)
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPanelProLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(precioBtn)
                .addContainerGap())
        );

        alquilerPanel.add(listaPanelPro);
        listaPanelPro.setBounds(10, 20, 350, 390);

        listaPanelProCompra.setBackground(new java.awt.Color(0, 0, 0,90));

        listaLabel15.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel15.setText("Carrito de Compras de ");

        jScrollPane7.setViewportView(listaCarrito1);

        listaLabel18.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel18.setText("Codigo");

        listaLabel19.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel19.setText("Nombre");

        eliminarBtn1.setBackground(new java.awt.Color(255, 51, 0));
        eliminarBtn1.setText("Quitar");
        eliminarBtn1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        eliminarBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtn1ActionPerformed(evt);
            }
        });

        listaLabel20.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel20.setText("Tipo");

        listaLabel21.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel21.setText("Cantidad");

        nombrELabel.setForeground(new java.awt.Color(255, 255, 255));
        nombrELabel.setText("Nombre");

        javax.swing.GroupLayout listaPanelProCompraLayout = new javax.swing.GroupLayout(listaPanelProCompra);
        listaPanelProCompra.setLayout(listaPanelProCompraLayout);
        listaPanelProCompraLayout.setHorizontalGroup(
            listaPanelProCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPanelProCompraLayout.createSequentialGroup()
                .addGroup(listaPanelProCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listaPanelProCompraLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(eliminarBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(listaPanelProCompraLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(listaPanelProCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(listaPanelProCompraLayout.createSequentialGroup()
                                .addComponent(listaLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(listaLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(listaLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(listaLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(listaPanelProCompraLayout.createSequentialGroup()
                                .addComponent(listaLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nombrELabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(listaPanelProCompraLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        listaPanelProCompraLayout.setVerticalGroup(
            listaPanelProCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPanelProCompraLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(listaPanelProCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaLabel15)
                    .addComponent(nombrELabel))
                .addGap(10, 10, 10)
                .addGroup(listaPanelProCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaLabel18)
                    .addComponent(listaLabel19)
                    .addComponent(listaLabel20)
                    .addComponent(listaLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(eliminarBtn1)
                .addGap(16, 16, 16))
        );

        alquilerPanel.add(listaPanelProCompra);
        listaPanelProCompra.setBounds(370, 20, 300, 230);

        fondopanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CapaGrafica/img/cliente.jpg"))); // NOI18N
        alquilerPanel.add(fondopanel);
        fondopanel.setBounds(0, 0, 680, 440);

        jTabbedPane1.addTab("Alquiler", alquilerPanel);

        devolucionesPanel.setLayout(null);

        listaPanelPro1.setBackground(new java.awt.Color(0, 0, 0,90));

        listaLabel14.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel14.setText("Productos Alquilados de ");

        jScrollPane6.setViewportView(listaAlquilados);

        listaLabel16.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel16.setText("Codigo");

        listaLabel17.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel17.setText("Nombre");

        listaLabel23.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel23.setText("No. Alquilados");

        devolverBtn.setBackground(new java.awt.Color(51, 204, 0));
        devolverBtn.setText("Devolver");
        devolverBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        devolverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devolverBtnActionPerformed(evt);
            }
        });

        listaLabel24.setForeground(new java.awt.Color(255, 255, 255));
        listaLabel24.setText("Tipo");

        nombreLabel.setForeground(new java.awt.Color(255, 255, 255));
        nombreLabel.setText("Nombre");

        javax.swing.GroupLayout listaPanelPro1Layout = new javax.swing.GroupLayout(listaPanelPro1);
        listaPanelPro1.setLayout(listaPanelPro1Layout);
        listaPanelPro1Layout.setHorizontalGroup(
            listaPanelPro1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPanelPro1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(devolverBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140))
            .addGroup(listaPanelPro1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(listaPanelPro1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listaPanelPro1Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPanelPro1Layout.createSequentialGroup()
                        .addComponent(listaLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(listaLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(listaLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(listaLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(51, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPanelPro1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(listaLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nombreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70))))
        );
        listaPanelPro1Layout.setVerticalGroup(
            listaPanelPro1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPanelPro1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(listaPanelPro1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaLabel14)
                    .addComponent(nombreLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listaPanelPro1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaLabel16)
                    .addComponent(listaLabel17)
                    .addComponent(listaLabel23)
                    .addComponent(listaLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(devolverBtn)
                .addGap(23, 23, 23))
        );

        devolucionesPanel.add(listaPanelPro1);
        listaPanelPro1.setBounds(160, 20, 360, 390);

        fondopanel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CapaGrafica/img/cliente.jpg"))); // NOI18N
        devolucionesPanel.add(fondopanel1);
        fondopanel1.setBounds(0, 0, 680, 440);

        jTabbedPane1.addTab("Devoluciones", devolucionesPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
     // FUNCION QUE CALCULA EL PRECIO TOTAL Y EL DESCUENTE QUE TIENE EL USUARIO
    public String calculoCompra()
    {
        Calendar cal = Calendar.getInstance(); // cALENDARIO
        boolean monday = cal.get(Calendar.DAY_OF_WEEK) == Calendar.MONDAY; // GUARDA SI ES lUNES O NO
        
        double oro = 0.0;
        double vip = 0.0;
        double lunes = 0.0;
        
        if(this.carrito.usuario.getCiudadanoOro() && this.carrito.usuario.getTipoUsuario() == 2) // sI ES CLIENTE NORMAL Y CIUDADANO DE ORO
            oro = (this.precioTotal *.10); // SE UARDA EL DESCUENTO DEL 10%
        if(this.carrito.usuario.getTipoUsuario() == 3) // SI ES CLIENTE VIP
            vip = (this.precioTotal *.15); // SE GUARDA EL DESCUENTO DEL 15%
        if(monday) // SI ES LUNES
            lunes = (this.precioTotal *.50); // DESCUNETO DEL 50%
        
        this.precioDesc = this.precioTotal - oro - vip - lunes; // sE APLICAN DESCUENTES
        // SE REGRESA UNA STRING CON EL RESUMEN DE COMPRAS
        return "Precio Total : " + this.precioTotal + "\nDescuento Ciudadano Oro: " + oro + "\nDescuento Cliente VIP: " + vip + "\nDescuento Lunes: " + lunes + "\nTotal Neto : " + this.precioDesc;
        
        }
    // BOTON AGREGAR, 
    // AGREGA DE LA LISAT DE STOCK LA CANTIDAD PEDIDA DE UN PRODUCTO AL CARRITO
    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        // TODO add your handling code here:
        if(this.listaProductos.getSelectedValue() == null)
        {
            JOptionPane.showMessageDialog(null, "No se selecciono el producto a agregar","Faltan Datos",JOptionPane.INFORMATION_MESSAGE);
        }
        else // SI TODO ESTA LLENO
        {
            // GUARDA DATOS
            String s = this.listaProductos.getSelectedValue();
            String cods = s.substring(0, 6);
            String tipo = s.substring(14,15);
            int cod = Integer.parseInt(cods);
            
            int num = Integer.parseInt(JOptionPane.showInputDialog(null, "Escriba el numero de la cantidad a alquilar del producto seleccionado", "Cantidad a Alquilar", JOptionPane.INFORMATION_MESSAGE));
            
            // DEPENDE DEL USUARIO
            switch(tipo)
            {
                case "P":                
                    try {
                       Producto pro = this.carrito.bus(cod, 1);     // bUSCA EL PRODUCTO
                       if(pro.getExistencia() - num <0) // SI SE PIDE MAS PRODUCTOS DE LOS QUE SE TIENEN
                       {
                           JOptionPane.showMessageDialog(null, "No se tienen los suficientes peliculas para alquilar","Productos Insuficientes",JOptionPane.INFORMATION_MESSAGE);
                       }
                       else if(pro.getExistencia() - num ==0) // SI SE PIDE EXACTOS LOS QUE SE TIENE
                       {
                           this.carrito.agregarCarrito(pro,num); // AGREGA AL CARRRITO
                            this.carrito.delete(pro.getCodigo(), 1); // BORRA LOS DATOS VIEJOS DEL STOCK
                            // rESETEO, ACTUALIZACION Y CALCULO DEL PRECIO A PAGARA
                           this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                           this.listaProductos.setModel(this.carrito.actualizarJList());
                           this.listaAlquilados.setModel(this.carrito.actualizarJListAlquilados());
                           this.precioTotal = this.precioTotal + (num*500);
                       this.resumeLabel.setText(this.calculoCompra());
                          
                       }else
                       {
                           // SI SE MAYOR LO QUE SE PIDE 
// rESETEO, ACTUALIZACION Y CALCULO DEL PRECIO A PAGARA
                           this.carrito.agregarCarrito(pro,num);
                       this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                       this.listaProductos.setModel(this.carrito.actualizarJList());
                       this.precioTotal = this.precioTotal + (num*500);
                       this.resumeLabel.setText(this.calculoCompra());
                       }
                       
                    } catch (Exception ex) {
                        Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
                    }                
                break;

                
                case "V":                    
                    try {
                        //System.out.println(2);
                       Producto pro = this.carrito.bus(cod, 2);     
                       if(pro.getExistencia() - num <0)
                       {
                           JOptionPane.showMessageDialog(null, "No se tienen los suficientes videojuegos para alquilar","Productos Insuficientes",JOptionPane.INFORMATION_MESSAGE);
                       }
                       else if(pro.getExistencia() - num ==0)
                       {
                           this.carrito.agregarCarrito(pro,num);
                            this.carrito.delete(pro.getCodigo(), 2);
                           this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                           this.listaProductos.setModel(this.carrito.actualizarJList());
                           this.listaAlquilados.setModel(this.carrito.actualizarJListAlquilados());
                           if(pro.getCreacion()<2011)
                       {
                           this.precioTotal = this.precioTotal + (num*500);
                           this.resumeLabel.setText(this.calculoCompra());
                       }
                       else
                       {
                           this.precioTotal = this.precioTotal + (num*575);
                           this.resumeLabel.setText(this.calculoCompra());
                       }
                       
                       
                          
                       }else
                       {
                           this.carrito.agregarCarrito(pro,num);
                       this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                       this.listaProductos.setModel(this.carrito.actualizarJList());
                       if(pro.getCreacion()<2011)
                       {
                           this.precioTotal = this.precioTotal + (num*500);
                           this.resumeLabel.setText(this.calculoCompra());
                       }
                       else
                       {
                           this.precioTotal = this.precioTotal + (num*575);
                           this.resumeLabel.setText(this.calculoCompra());
                       }
                       
                       }
                       
                    } catch (Exception ex) {
                        Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                break;
                
                case "C":                    
                    try {
                        Producto pro = this.carrito.bus(cod, 3);     
                       if(pro.getExistencia() - num <0)
                       {
                           JOptionPane.showMessageDialog(null, "No se tienen los suficientes carteles para alquilar","Productos Insuficientes",JOptionPane.INFORMATION_MESSAGE);
                       }
                       else if(pro.getExistencia() - num ==0)
                       {
                           this.carrito.agregarCarrito(pro,num);
                           this.carrito.delete(pro.getCodigo(), 3);
                           this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                           this.listaProductos.setModel(this.carrito.actualizarJList());
                           this.listaAlquilados.setModel(this.carrito.actualizarJListAlquilados());
                           this.precioTotal = this.precioTotal + (num*600);
                       this.resumeLabel.setText(this.calculoCompra());
                          
                       }else
                       {
                           this.carrito.agregarCarrito(pro,num);
                       this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                       this.listaProductos.setModel(this.carrito.actualizarJList());
                       this.precioTotal = this.precioTotal + (num*600);
                       this.resumeLabel.setText(this.calculoCompra());
                       }
                       
                    } catch (Exception ex) {
                        Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                break;
                
                
            }
        }
        
        

    }//GEN-LAST:event_agregarBtnActionPerformed
// cOMPRAR BOTON
    private void comprarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprarBtnActionPerformed
        // TODO add your handling code here:
        if(!this.carrito.carrito.isEmpty()){ // SI NO ESTA VACIA LA LISTA DEL CARRITO
            // pIDE SI ES EN EFECTIVO O PTARJETA EL PAGO
            String[] options = {"Tarjeta", "Efectivo"};
            int opc = JOptionPane.showOptionDialog(null, "Es necesario que seleccione una opcion", "Tipo de Pago", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            if(opc == 0){ // SI ES TARJETA
                String s = JOptionPane.showInputDialog(null,"Digite el numero de Tarjeta\nSolo se Aceptan Visa y MasterCard","Numero de Tarjeta",JOptionPane.INFORMATION_MESSAGE);
                if(s.substring(0,1).equals("5") || s.substring(0,1).equals("4")) // SE PIDE LA TARJETA Y VERIFICA QUE ES MASTERcARD O vISA
                {
                    
                    if(s.length() == 16) // vERIFICA QUE SEA UN NUMERO VALIDO
                    {
                        // SI ES ASI SE EFECTUA LA COMPRAA
                        try {
                            this.carrito.comprarCarrito();
                        } catch (IOException ex) {
                            Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Date date = new Date();
                        JOptionPane.showMessageDialog(null, "Pago con Tarjeta Aceptada\nPago Total: " + this.precioDesc + "\nCliente: " + this.carrito.usuario.getNombre() + "\nFecha: " + date.toString() ,"Compra Aceptada",JOptionPane.INFORMATION_MESSAGE);
                        this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                        this.listaAlquilados.setModel(this.carrito.actualizarJListAlquilados());
                        this.precioTotal = 0.0;
                        this.precioDesc = 0.0;
                        this.resumeLabel.setText("");
                        
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "EL numero de digitos de la trajeta debe ser de 16","Tarjeta No Aceptada",JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "La tarjeta debe iniciar con 4 (Visa) o 3 (MasterCard)","Tarjeta No Aceptada",JOptionPane.INFORMATION_MESSAGE);
                }
                
            }
            else // SI ES EN EFECTIVO
            {
                String[] options2 = {"Colonos", "Dolares"};
                int op = JOptionPane.showOptionDialog(null, "Es necesario que seleccione una opcion", "Tipo de Moneda", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options2, options2[0]);
                if(op == 0) // PIDE SI ES EN COLONO S ODOLARES Y SI ES EN COLONOS
                {
                    // PIDE EL PAGO
                    Double pago = Double.parseDouble(JOptionPane.showInputDialog(null,"Total a Pagar: "+ this.precioDesc +"\nFavor de digitar la cantidad en efectivo que dara","Pago en Colonos",JOptionPane.INFORMATION_MESSAGE));
                    if(pago == this.precioDesc) // SI ES EXACTO MUESTRA INFO SIN CAMBIO
                    {
                        try {
                            this.carrito.comprarCarrito();
                        } catch (IOException ex) {
                            Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Date date = new Date();
                        JOptionPane.showMessageDialog(null, "Pago con en efectivo Aceptado\nPago Total: " + this.precioDesc + "\nCambio: 0.0 \nCliente: " + this.carrito.usuario.getNombre() + "\nFecha: " + date.toString() ,"Compra Aceptada",JOptionPane.INFORMATION_MESSAGE);
                        this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                        this.listaAlquilados.setModel(this.carrito.actualizarJListAlquilados());
                        this.precioTotal = 0.0;
                        this.precioDesc = 0.0;
                        this.resumeLabel.setText("");
                    }
                    else if (pago > this.precioDesc) // SI ES MAYOR EL PAGO MUESTRA INFO Y SU CAMBIO
                    {
                        try {
                            this.carrito.comprarCarrito();
                        } catch (IOException ex) {
                            Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Date date = new Date();
                        JOptionPane.showMessageDialog(null, "Pago con en efectivo Aceptado\nPago Total: " + this.precioDesc + "\nCambio: "+ (pago-this.precioDesc) +" \nCliente: " + this.carrito.usuario.getNombre() + "\nFecha: " + date.toString() ,"Compra Aceptada",JOptionPane.INFORMATION_MESSAGE);
                        this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                        this.listaAlquilados.setModel(this.carrito.actualizarJListAlquilados());
                        this.precioTotal = 0.0;
                        this.precioDesc = 0.0;
                        this.resumeLabel.setText("");
                    }
                    else // SI NO SE DICE QUE FALTA DINERO
                        JOptionPane.showMessageDialog(null, "Dinero Insuficiente","Compra NO Aceptada",JOptionPane.INFORMATION_MESSAGE);
                }
                if(op == 1) // SI ES EN DOLARES, ES EL MISMO PROCEDIMIENTOS PERO TOMANDO EN CUENTA QUE 1 DOLAR = 567.67 COLONOS POR LO QUE HACE LA CONVERSION EN CADA COMPARACION
                {
                    Double pago = Double.parseDouble(JOptionPane.showInputDialog(null,"Total a Pagar: "+ (this.precioDesc/567.67) +"\nFavor de digitar la cantidad en efectivo que dara","Pago en Dolares",JOptionPane.INFORMATION_MESSAGE));
                    if(pago == (this.precioDesc/567.67))
                    {
                        try {
                            this.carrito.comprarCarrito();
                        } catch (IOException ex) {
                            Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Date date = new Date();
                        JOptionPane.showMessageDialog(null, "Pago con en efectivo Aceptado\nPago Total: " + this.precioDesc + "\nCambio: 0.0 \nCliente: " + this.carrito.usuario.getNombre() + "\nFecha: " + date.toString() ,"Compra Aceptada",JOptionPane.INFORMATION_MESSAGE);
                        this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                        this.listaAlquilados.setModel(this.carrito.actualizarJListAlquilados());
                        this.precioTotal = 0.0;
                        this.precioDesc = 0.0;
                        this.resumeLabel.setText("");
                    }
                    else if (pago > (this.precioDesc/567.67))
                    {
                        try {
                            this.carrito.comprarCarrito();
                        } catch (IOException ex) {
                            Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Date date = new Date();
                        JOptionPane.showMessageDialog(null, "Pago con en efectivo Aceptado\nPago Total: " + (this.precioDesc/567.67) + "\nCambio: "+ (pago-(this.precioDesc/567.67)) +" \nCliente: " + this.carrito.usuario.getNombre() + "\nFecha: " + date.toString() ,"Compra Aceptada",JOptionPane.INFORMATION_MESSAGE);
                        this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                        this.listaAlquilados.setModel(this.carrito.actualizarJListAlquilados());
                        this.precioTotal = 0.0;
                        this.precioDesc = 0.0;
                        this.resumeLabel.setText("");
                    }
                    else
                        JOptionPane.showMessageDialog(null, "Dinero Insuficiente","Compra NO Aceptada",JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Carrito de Compras Vacio","Carrito Vacio",JOptionPane.INFORMATION_MESSAGE);
        }
       /*
        for(Producto  pro : this.carrito.usuario.alquilados )
        {
            System.out.println(pro.toString());
        }*/
    }//GEN-LAST:event_comprarBtnActionPerformed
// mUESTRA INFO DE PRECIOS Y DESCUNETOS
    private void precioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioBtnActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Los precios marcados son por dia\nPeliculas: 500 colonos\nVideojuegos: 500 colonos\n-Si es su año de creacion es a partir del 2011: 575 colonos\nCartelera: 600 colonos\n\n--DESCUENTOS--\nAplican al monto total\nDias Lunes: 50%\nCliente Regular Ciudadano de Oro: 10%\nCliente VIP: 15%  ","Precios",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_precioBtnActionPerformed
// dEVOLVER BOTON
    private void devolverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devolverBtnActionPerformed
        // TODO add your handling code here:
        if(this.listaAlquilados.getSelectedValue() == null)
        {
            JOptionPane.showMessageDialog(null, "No se selecciono un producto a devolder","Faltan Datos",JOptionPane.INFORMATION_MESSAGE);
        }
        else // SI SE SELEECIONO UN ELEMENTO DE LA LISTA
        {
            int indice = this.listaAlquilados.getSelectedIndex();
            Producto borrado = this.carrito.devolverProducto(indice); // bORRA DE LA LISTA DE ALQUILADOS DE USUARIO
            try {
                Producto stock = this.carrito.bus(borrado.getCodigo(),borrado.getTipo()); // BUSCA SI HAY EN STOCK
                if(stock == null) // SI NO HAY
                {
                    // INSERTA LOS DATOS DE LA DEOLUVION COMO NUEVOS
                    this.carrito.insert(borrado);
                    this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                    this.listaProductos.setModel(this.carrito.actualizarJList());
                    this.listaAlquilados.setModel(this.carrito.actualizarJListAlquilados());
                    
                    
                }
                else // SI EXISTE EN STOCK SE COMBIANA SUS EXISTENCIAS Y ACTUALIZA EL ARCHIVO
                {
                    stock.setExistencia(stock.getExistencia() + borrado.getExistencia());
                    this.carrito.insert(stock);
                     this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                        this.listaProductos.setModel(this.carrito.actualizarJList());
                        this.listaAlquilados.setModel(this.carrito.actualizarJListAlquilados());
                    
                }
            } catch (Exception ex) {
                Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
       
    }//GEN-LAST:event_devolverBtnActionPerformed
// pARA ELIMINAR DEL CARRITO
    private void eliminarBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtn1ActionPerformed
        // TODO add your handling code here:
        if(this.listaCarrito1.getSelectedValue() == null)
        {
            JOptionPane.showMessageDialog(null, "No se selecciono el producto a quitar","Faltan Datos",JOptionPane.INFORMATION_MESSAGE);
        }
        else // SI ESTA SELECCIONADO EN EL CARRITO
        {
            int indice = this.listaCarrito1.getSelectedIndex();
            // HACE LO MISMO QUE AGREGAR PERO DE LA LISTA DE DEL CARRITO AL DE TODOS
            Producto borrado = this.carrito.borrarCarrito(indice);
            try {
                Producto stock = this.carrito.bus(borrado.getCodigo(),borrado.getTipo());
                if(stock == null)
                {
                    this.carrito.insert(borrado);
                    this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                    this.listaProductos.setModel(this.carrito.actualizarJList());
                    switch(borrado.getTipo())
                    {
                        case 1:
                            this.precioTotal = this.precioTotal - (borrado.getExistencia()*500);
                            this.resumeLabel.setText(this.calculoCompra());
                        break;
                        
                        case 2:
                            if(borrado.getCreacion()<2011)
                            {
                                this.precioTotal = this.precioTotal - (borrado.getExistencia()*500);
                                this.resumeLabel.setText(this.calculoCompra());
                            }
                            else
                            {
                                this.precioTotal = this.precioTotal - (borrado.getExistencia()*575);
                            this.resumeLabel.setText(this.calculoCompra());
                            }
                        break;
                        
                        case 3:
                            this.precioTotal = this.precioTotal - (borrado.getExistencia()*600);
                            this.resumeLabel.setText(this.calculoCompra());
                        break;
                        
                    }
                    
                }
                else
                {
                    stock.setExistencia(stock.getExistencia() + borrado.getExistencia());
                    this.carrito.insert(stock);
                     this.listaCarrito1.setModel(this.carrito.actualizarJListCarrito());
                        this.listaProductos.setModel(this.carrito.actualizarJList());
                    switch(borrado.getTipo())
                    {
                        case 1:
                            this.precioTotal = this.precioTotal - (borrado.getExistencia()*500);
                            this.resumeLabel.setText(this.calculoCompra());
                        break;
                        
                        case 2:
                            if(borrado.getCreacion()<2011)
                            {
                                this.precioTotal = this.precioTotal - (borrado.getExistencia()*500);
                                this.resumeLabel.setText(this.calculoCompra());
                            }
                            else
                            {
                                this.precioTotal = this.precioTotal - (borrado.getExistencia()*575);
                            this.resumeLabel.setText(this.calculoCompra());
                            }
                        break;
                        
                        case 3:
                            this.precioTotal = this.precioTotal - (borrado.getExistencia()*600);
                            this.resumeLabel.setText(this.calculoCompra());
                        break;
                        
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
       
        
    }//GEN-LAST:event_eliminarBtn1ActionPerformed

    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ClienteForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ClienteForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBtn;
    private javax.swing.JPanel alquilerPanel;
    private javax.swing.JButton comprarBtn;
    private javax.swing.JPanel devolucionesPanel;
    private javax.swing.JButton devolverBtn;
    private javax.swing.JButton eliminarBtn1;
    private javax.swing.JLabel fondopanel;
    private javax.swing.JLabel fondopanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> listaAlquilados;
    private javax.swing.JList<String> listaCarrito1;
    private javax.swing.JLabel listaLabel10;
    private javax.swing.JLabel listaLabel11;
    private javax.swing.JLabel listaLabel12;
    private javax.swing.JLabel listaLabel14;
    private javax.swing.JLabel listaLabel15;
    private javax.swing.JLabel listaLabel16;
    private javax.swing.JLabel listaLabel17;
    private javax.swing.JLabel listaLabel18;
    private javax.swing.JLabel listaLabel19;
    private javax.swing.JLabel listaLabel20;
    private javax.swing.JLabel listaLabel21;
    private javax.swing.JLabel listaLabel23;
    private javax.swing.JLabel listaLabel24;
    private javax.swing.JLabel listaLabel7;
    private javax.swing.JLabel listaLabel8;
    private javax.swing.JLabel listaLabel9;
    private javax.swing.JPanel listaPanelPro;
    private javax.swing.JPanel listaPanelPro1;
    private javax.swing.JPanel listaPanelProCarrito;
    private javax.swing.JPanel listaPanelProCompra;
    private javax.swing.JList<String> listaProductos;
    private javax.swing.JLabel nombrELabel;
    private javax.swing.JLabel nombreLabel;
    private javax.swing.JButton precioBtn;
    private javax.swing.JTextArea resumeLabel;
    // End of variables declaration//GEN-END:variables
}
