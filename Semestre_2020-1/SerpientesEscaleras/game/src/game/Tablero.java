/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author 
 */
public final class Tablero extends javax.swing.JFrame {

    public boolean jugador; // Boleano que define el turno de cada jugador (True: turno jugador 1 y False turno jugador 2)
    public JLabel posicion[]; // Arreglo de las etiquetas para saber donde poner las imagenes en el tablero
    public int matriz[][]; // Tablero
    public int actual1; // Posicion actual del jugador 1
    public int actual2; // posicion actual del jugador 2
    public boolean primero; // Bandera para el primer movimiento
    public boolean ganar; // Bandara indica si ya hay ganador
    
    /*
    // En la matriz 
    0: indica espacio vacio
    1: indica lugar ocupado por jugador 1
    2: inidca lugar ocupado por jugador 2
    3: indica lugar ocupado por ambos jugadores
    */
    /**
     * Creates new form Tablero
     */
    public Tablero() {
        initComponents(); 
        this.jugador = true; // Inicia con jugador 1
        this.posicion = new JLabel[51]; // Crea el arreglo de etiquetas
        this.matriz = new int[5][10]; // crea la matriz (tablero)
        this.actual1 = 1;
        this.actual2 = 1;
        guardarPosiciones(); // Guarda las etiquetas del tablero en el arreglo de etiquetas
        inicializarPosiciones(); // Inicializa las etiquetas como vacias
        this.setLocationRelativeTo(null); // VENTENA EN CENTRO DE LA PANTALLA
        this.ganar = false;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableroPanel = new javax.swing.JPanel();
        pos1 = new javax.swing.JLabel();
        pos2 = new javax.swing.JLabel();
        pos3 = new javax.swing.JLabel();
        pos4 = new javax.swing.JLabel();
        pos5 = new javax.swing.JLabel();
        pos6 = new javax.swing.JLabel();
        pos7 = new javax.swing.JLabel();
        pos8 = new javax.swing.JLabel();
        pos9 = new javax.swing.JLabel();
        pos10 = new javax.swing.JLabel();
        pos11 = new javax.swing.JLabel();
        pos12 = new javax.swing.JLabel();
        pos13 = new javax.swing.JLabel();
        pos14 = new javax.swing.JLabel();
        pos15 = new javax.swing.JLabel();
        pos16 = new javax.swing.JLabel();
        pos17 = new javax.swing.JLabel();
        pos18 = new javax.swing.JLabel();
        pos19 = new javax.swing.JLabel();
        pos20 = new javax.swing.JLabel();
        pos21 = new javax.swing.JLabel();
        pos22 = new javax.swing.JLabel();
        pos23 = new javax.swing.JLabel();
        pos24 = new javax.swing.JLabel();
        pos25 = new javax.swing.JLabel();
        pos26 = new javax.swing.JLabel();
        pos27 = new javax.swing.JLabel();
        pos28 = new javax.swing.JLabel();
        pos29 = new javax.swing.JLabel();
        pos30 = new javax.swing.JLabel();
        pos31 = new javax.swing.JLabel();
        pos32 = new javax.swing.JLabel();
        pos33 = new javax.swing.JLabel();
        pos34 = new javax.swing.JLabel();
        pos35 = new javax.swing.JLabel();
        pos36 = new javax.swing.JLabel();
        pos37 = new javax.swing.JLabel();
        pos38 = new javax.swing.JLabel();
        pos39 = new javax.swing.JLabel();
        pos40 = new javax.swing.JLabel();
        pos41 = new javax.swing.JLabel();
        pos42 = new javax.swing.JLabel();
        pos43 = new javax.swing.JLabel();
        pos44 = new javax.swing.JLabel();
        pos45 = new javax.swing.JLabel();
        pos46 = new javax.swing.JLabel();
        pos47 = new javax.swing.JLabel();
        pos48 = new javax.swing.JLabel();
        pos49 = new javax.swing.JLabel();
        pos50 = new javax.swing.JLabel();
        tableroLabel = new javax.swing.JLabel();
        juegoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dado2Panel = new javax.swing.JPanel();
        dado2Label = new javax.swing.JLabel();
        dado1Panel = new javax.swing.JPanel();
        dado1Label = new javax.swing.JLabel();
        lanzarButton = new javax.swing.JButton();
        finButton = new javax.swing.JButton();
        reiniciarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Serpientes y Escaleras");
        setResizable(false);

        tableroPanel.setLayout(null);

        pos1.setText("1");
        tableroPanel.add(pos1);
        pos1.setBounds(130, 220, 30, 30);

        pos2.setText("2");
        tableroPanel.add(pos2);
        pos2.setBounds(160, 220, 20, 30);

        pos3.setText("3");
        tableroPanel.add(pos3);
        pos3.setBounds(190, 220, 20, 30);

        pos4.setText("4");
        tableroPanel.add(pos4);
        pos4.setBounds(220, 230, 20, 30);

        pos5.setText("5");
        tableroPanel.add(pos5);
        pos5.setBounds(250, 230, 20, 30);

        pos6.setText("6");
        tableroPanel.add(pos6);
        pos6.setBounds(280, 230, 20, 30);

        pos7.setText("7");
        tableroPanel.add(pos7);
        pos7.setBounds(310, 230, 20, 30);

        pos8.setText("8");
        tableroPanel.add(pos8);
        pos8.setBounds(340, 220, 20, 30);

        pos9.setText("9");
        tableroPanel.add(pos9);
        pos9.setBounds(360, 210, 20, 30);

        pos10.setText("10");
        tableroPanel.add(pos10);
        pos10.setBounds(380, 190, 20, 30);

        pos11.setText("11");
        tableroPanel.add(pos11);
        pos11.setBounds(350, 170, 20, 30);

        pos12.setText("12");
        tableroPanel.add(pos12);
        pos12.setBounds(330, 170, 20, 30);

        pos13.setText("13");
        tableroPanel.add(pos13);
        pos13.setBounds(300, 170, 20, 30);

        pos14.setText("14");
        tableroPanel.add(pos14);
        pos14.setBounds(270, 160, 20, 30);

        pos15.setText("15");
        tableroPanel.add(pos15);
        pos15.setBounds(240, 170, 20, 30);

        pos16.setText("16");
        tableroPanel.add(pos16);
        pos16.setBounds(210, 170, 20, 30);

        pos17.setText("17");
        tableroPanel.add(pos17);
        pos17.setBounds(180, 170, 20, 30);

        pos18.setText("18");
        tableroPanel.add(pos18);
        pos18.setBounds(160, 170, 20, 30);

        pos19.setText("19");
        tableroPanel.add(pos19);
        pos19.setBounds(130, 170, 20, 30);

        pos20.setText("20");
        tableroPanel.add(pos20);
        pos20.setBounds(100, 140, 20, 30);

        pos21.setText("21");
        tableroPanel.add(pos21);
        pos21.setBounds(130, 130, 20, 30);

        pos22.setText("22");
        tableroPanel.add(pos22);
        pos22.setBounds(160, 120, 20, 30);

        pos23.setText("23");
        tableroPanel.add(pos23);
        pos23.setBounds(190, 120, 20, 30);

        pos24.setText("24");
        tableroPanel.add(pos24);
        pos24.setBounds(220, 120, 20, 30);

        pos25.setText("25");
        tableroPanel.add(pos25);
        pos25.setBounds(250, 130, 20, 30);

        pos26.setText("26");
        tableroPanel.add(pos26);
        pos26.setBounds(280, 130, 20, 30);

        pos27.setText("27");
        tableroPanel.add(pos27);
        pos27.setBounds(310, 140, 20, 30);

        pos28.setText("28");
        tableroPanel.add(pos28);
        pos28.setBounds(340, 130, 20, 30);

        pos29.setText("29");
        tableroPanel.add(pos29);
        pos29.setBounds(370, 130, 20, 30);

        pos30.setText("30");
        tableroPanel.add(pos30);
        pos30.setBounds(380, 100, 20, 30);

        pos31.setText("31");
        tableroPanel.add(pos31);
        pos31.setBounds(360, 80, 20, 30);

        pos32.setText("32");
        tableroPanel.add(pos32);
        pos32.setBounds(330, 80, 20, 30);

        pos33.setText("33");
        tableroPanel.add(pos33);
        pos33.setBounds(300, 80, 20, 30);

        pos34.setText("34");
        tableroPanel.add(pos34);
        pos34.setBounds(270, 80, 20, 30);

        pos35.setText("35");
        tableroPanel.add(pos35);
        pos35.setBounds(240, 80, 20, 30);

        pos36.setText("36");
        tableroPanel.add(pos36);
        pos36.setBounds(220, 80, 20, 30);

        pos37.setText("37");
        tableroPanel.add(pos37);
        pos37.setBounds(190, 90, 20, 30);

        pos38.setText("38");
        tableroPanel.add(pos38);
        pos38.setBounds(160, 90, 20, 30);

        pos39.setText("39");
        tableroPanel.add(pos39);
        pos39.setBounds(130, 80, 20, 30);

        pos40.setText("40");
        tableroPanel.add(pos40);
        pos40.setBounds(100, 70, 20, 30);

        pos41.setText("41");
        tableroPanel.add(pos41);
        pos41.setBounds(110, 50, 20, 30);

        pos42.setText("42");
        tableroPanel.add(pos42);
        pos42.setBounds(140, 40, 20, 30);

        pos43.setText("43");
        tableroPanel.add(pos43);
        pos43.setBounds(160, 30, 20, 30);

        pos44.setText("44");
        tableroPanel.add(pos44);
        pos44.setBounds(190, 30, 20, 30);

        pos45.setText("45");
        tableroPanel.add(pos45);
        pos45.setBounds(220, 30, 20, 30);

        pos46.setText("46");
        tableroPanel.add(pos46);
        pos46.setBounds(250, 30, 20, 30);

        pos47.setText("47");
        tableroPanel.add(pos47);
        pos47.setBounds(280, 30, 20, 30);

        pos48.setText("48");
        tableroPanel.add(pos48);
        pos48.setBounds(310, 30, 20, 30);

        pos49.setText("49");
        tableroPanel.add(pos49);
        pos49.setBounds(340, 30, 20, 30);

        pos50.setText("50");
        tableroPanel.add(pos50);
        pos50.setBounds(370, 40, 20, 30);

        tableroLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ser.png"))); // NOI18N
        tableroPanel.add(tableroLabel);
        tableroLabel.setBounds(0, 0, 480, 289);

        juegoPanel.setBackground(new java.awt.Color(255, 153, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Dados");

        dado2Panel.setBackground(new java.awt.Color(0, 0, 0));

        dado2Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/1.jpg"))); // NOI18N

        javax.swing.GroupLayout dado2PanelLayout = new javax.swing.GroupLayout(dado2Panel);
        dado2Panel.setLayout(dado2PanelLayout);
        dado2PanelLayout.setHorizontalGroup(
            dado2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dado2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dado2Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        dado2PanelLayout.setVerticalGroup(
            dado2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dado2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dado2Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        dado1Panel.setBackground(new java.awt.Color(0, 0, 0));

        dado1Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/1.jpg"))); // NOI18N

        javax.swing.GroupLayout dado1PanelLayout = new javax.swing.GroupLayout(dado1Panel);
        dado1Panel.setLayout(dado1PanelLayout);
        dado1PanelLayout.setHorizontalGroup(
            dado1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dado1PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dado1Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        dado1PanelLayout.setVerticalGroup(
            dado1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dado1PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dado1Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        lanzarButton.setText("Lanzar");
        lanzarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lanzarButtonActionPerformed(evt);
            }
        });

        finButton.setText("Finalizar Juego");
        finButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finButtonActionPerformed(evt);
            }
        });

        reiniciarButton.setText("Reiniciar Juego");
        reiniciarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reiniciarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout juegoPanelLayout = new javax.swing.GroupLayout(juegoPanel);
        juegoPanel.setLayout(juegoPanelLayout);
        juegoPanelLayout.setHorizontalGroup(
            juegoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(juegoPanelLayout.createSequentialGroup()
                .addGroup(juegoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(juegoPanelLayout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(lanzarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(juegoPanelLayout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, juegoPanelLayout.createSequentialGroup()
                .addGroup(juegoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(juegoPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(finButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(reiniciarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(juegoPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dado1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dado2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34))
        );
        juegoPanelLayout.setVerticalGroup(
            juegoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(juegoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(juegoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dado2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dado1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lanzarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(juegoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finButton)
                    .addComponent(reiniciarButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableroPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(juegoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tableroPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(juegoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Si hace click en el boton lanzar
    private void lanzarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lanzarButtonActionPerformed
        // TODO add your handling code here:
        if(!this.ganar) // Si aun no hay ganador, permite el tiro
        {
            lanzarDados(); // Manda a llmar a lanzar Dados
        }
        else // en caso de que haya ganador, se solicita que que reinicie el juego
        {
            System.out.println("Ya hay ganador\n Reinicia el juego");
            JOptionPane.showMessageDialog(null, "Ya hay ganador\n Reinicia el juego");
        }
        
    }//GEN-LAST:event_lanzarButtonActionPerformed

    // Si da click en el boton terminar juego, cierra la programa
    private void finButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finButtonActionPerformed
        // TODO add your handling code here:
        this.dispose(); // Cierra ventana
    }//GEN-LAST:event_finButtonActionPerformed
// Si da click en el boton reinciar
    private void reiniciarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reiniciarButtonActionPerformed
        // TODO add your handling code here:
        this.jugador = true; // Regresa al jugador 1
        // Los dados muestra unos
        dado1Label.setIcon(new ImageIcon(getClass().getResource("/img/1.jpg") )); // Para obtener el path de las imagenes
        dado2Label.setIcon(new ImageIcon(getClass().getResource("/img/1.jpg") )); // Para obtener el path de las imagenes
        // Quita todas las imagenes
        for(int i = 1;i<51;i++)
        {
            this.posicion[i].setIcon(null);
            this.posicion[i].revalidate();
        }
        // Pone en 0 la matriz
        for(int i = 0; i<5;i++)
            for(int j = 0; j<10;j++)
                this.matriz[i][j] = 0;
        // Marca que los dos jugadores estan en la primera posicion
        this.posicion[1].setIcon(new ImageIcon(getClass().getResource("/img/p3.png") ));
        this.matriz[0][0] = 3; // Pone a los dos jugadores en la primera posicion
        this.actual1 = 1; 
        this.actual2 = 1;
        this.primero = false; // No se ha hecho el primer movimiento
        this.ganar = false; // No hay ganador
        System.out.println("Reiniciado");
        
    }//GEN-LAST:event_reiniciarButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tablero().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dado1Label;
    private javax.swing.JPanel dado1Panel;
    private javax.swing.JLabel dado2Label;
    private javax.swing.JPanel dado2Panel;
    private javax.swing.JButton finButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel juegoPanel;
    private javax.swing.JButton lanzarButton;
    private javax.swing.JLabel pos1;
    private javax.swing.JLabel pos10;
    private javax.swing.JLabel pos11;
    private javax.swing.JLabel pos12;
    private javax.swing.JLabel pos13;
    private javax.swing.JLabel pos14;
    private javax.swing.JLabel pos15;
    private javax.swing.JLabel pos16;
    private javax.swing.JLabel pos17;
    private javax.swing.JLabel pos18;
    private javax.swing.JLabel pos19;
    private javax.swing.JLabel pos2;
    private javax.swing.JLabel pos20;
    private javax.swing.JLabel pos21;
    private javax.swing.JLabel pos22;
    private javax.swing.JLabel pos23;
    private javax.swing.JLabel pos24;
    private javax.swing.JLabel pos25;
    private javax.swing.JLabel pos26;
    private javax.swing.JLabel pos27;
    private javax.swing.JLabel pos28;
    private javax.swing.JLabel pos29;
    private javax.swing.JLabel pos3;
    private javax.swing.JLabel pos30;
    private javax.swing.JLabel pos31;
    private javax.swing.JLabel pos32;
    private javax.swing.JLabel pos33;
    private javax.swing.JLabel pos34;
    private javax.swing.JLabel pos35;
    private javax.swing.JLabel pos36;
    private javax.swing.JLabel pos37;
    private javax.swing.JLabel pos38;
    private javax.swing.JLabel pos39;
    private javax.swing.JLabel pos4;
    private javax.swing.JLabel pos40;
    private javax.swing.JLabel pos41;
    private javax.swing.JLabel pos42;
    private javax.swing.JLabel pos43;
    private javax.swing.JLabel pos44;
    private javax.swing.JLabel pos45;
    private javax.swing.JLabel pos46;
    private javax.swing.JLabel pos47;
    private javax.swing.JLabel pos48;
    private javax.swing.JLabel pos49;
    private javax.swing.JLabel pos5;
    private javax.swing.JLabel pos50;
    private javax.swing.JLabel pos6;
    private javax.swing.JLabel pos7;
    private javax.swing.JLabel pos8;
    private javax.swing.JLabel pos9;
    private javax.swing.JButton reiniciarButton;
    private javax.swing.JLabel tableroLabel;
    private javax.swing.JPanel tableroPanel;
    // End of variables declaration//GEN-END:variables
// Metodo lanzar dados
    public void lanzarDados() {
        //dado1Label.setIcon(new ImageIcon(getClass().getResource("/img/4.jpg") )); // Para obtener el path de las imagenes
        //dado2Label.setIcon(new ImageIcon(getClass().getResource("/img/6.jpg") ));
        // Aroja un numero del 1-6 y lo guarda pra cada dado
        int dado1 = 1 + (int) (Math.random() * 6);
        int dado2 = 1 + (int) (Math.random() * 6);
        if(this.jugador == true) // Si jugador es true 
        {
            System.out.println("Jugador 1"); // Lanzo el jugador 1
            
        }
        else // Si es false
        {
            System.out.println("Jugador 2"); // Lanzo de jugador 2
            
        }
        // Verifica que  numero salio para el dado 1 y dependiendo del numero, muestra la imagen del dado correspondiente
        switch(dado1)
        {
            case 1 :
                dado1Label.setIcon(new ImageIcon(getClass().getResource("/img/1.jpg") )); // Para obtener el path de las imagenes
            break;
            case 2 :
                dado1Label.setIcon(new ImageIcon(getClass().getResource("/img/2.jpg") )); // Para obtener el path de las imagenes
            break;
            case 3 :
                dado1Label.setIcon(new ImageIcon(getClass().getResource("/img/3.jpg") )); // Para obtener el path de las imagenes
            break;
            case 4 :
                dado1Label.setIcon(new ImageIcon(getClass().getResource("/img/4.jpg") )); // Para obtener el path de las imagenes
            break;
            case 5 :
                dado1Label.setIcon(new ImageIcon(getClass().getResource("/img/5.jpg") )); // Para obtener el path de las imagenes
            break;
            case 6 :
                dado1Label.setIcon(new ImageIcon(getClass().getResource("/img/6.jpg") )); // Para obtener el path de las imagenes
            break;
        }
        
        System.out.println("Dado 1: " + dado1); // Imprime en consola que salio en el dado 1 
         // Verifica que  numero salio para el dado 2 y dependiendo del numero, muestra la imagen del dado correspondiente
        switch(dado2)
        {
            case 1 :
                dado2Label.setIcon(new ImageIcon(getClass().getResource("/img/1.jpg") )); // Para obtener el path de las imagenes
            break;
            case 2 :
                dado2Label.setIcon(new ImageIcon(getClass().getResource("/img/2.jpg") )); // Para obtener el path de las imagenes
            break;
            case 3 :
                dado2Label.setIcon(new ImageIcon(getClass().getResource("/img/3.jpg") )); // Para obtener el path de las imagenes
            break;
            case 4 :
                dado2Label.setIcon(new ImageIcon(getClass().getResource("/img/4.jpg") )); // Para obtener el path de las imagenes
            break;
            case 5 :
                dado2Label.setIcon(new ImageIcon(getClass().getResource("/img/5.jpg") )); // Para obtener el path de las imagenes
            break;
            case 6 :
                dado2Label.setIcon(new ImageIcon(getClass().getResource("/img/6.jpg") )); // Para obtener el path de las imagenes
            break;
        }
        
        System.out.println("Dado 2: " + dado2); // Imprime en consola lo que salio en dado 2
        int totaldados = dado1 + dado2; // suma los dados para saber cuanto avanzar
        System.out.println("Dados: " + totaldados); // Imprime cuanto avanzara
        
        avanzarJugador(totaldados); // Manda lo que se tiene que avanzar a avanzarJugador
        this.jugador = !this.jugador; // Cambia turno a jugador 2
        
    }
public void avanzarJugador(int avanzar)
{
    // Recrre la matriz
    for(int i = 0; i<5;i++)
    {
        for(int j = 0; j<10;j++)
        {
            // Si ecnuentra algo diferente a 0 (Osea que este ocupado ese lugar
            if(matriz[i][j] != 0)
            {
                // Si es jugador 1
                if(matriz[i][j] == 1 && this.jugador == true)
                {
                    //System.out.println("Jugador 1!");
                    // ESTO SE REPITE PARA EL JUGADOR 2 Y CUANDO ENCUENTRA UN 3, SOLO QUE PONE LOS DATOS CORRESPODIENTES EN 
                    // LA MATRIZ (2 O 3) Y CAMBIA LAS IMAGENS SEGUN CORRESPONDA IGUALMENTE
                    int cont = 0, c=j,r=i; // inicia un contador de pasos que da, y columnas y renglones
                    while(cont < avanzar) // Mientras el contador sea menor al total que hay que avanzar
                    {
                        while(c+1 < 10 && cont < avanzar) // Recorre la fila hasta el final 
                        {
                            //System.out.println(cont);
                            c++; // Marca el numero de columna donde esta
                            cont++; // Cuenta los pasos que da
                        }
                        if(r+1>=5 && (this.actual1+avanzar)>=50) // Si ya esta en la ultima fila y lo que va a vanzar supera la ultima poscsicion
                        {   
                            this.posicion[this.actual1].setIcon(null); // Borra la imagen en la posicion inicial
                            this.posicion[this.actual1].revalidate();
                            
                            //System.out.println(r);
                            //System.out.println("Jugador " + this.jugador +" Gano ");
                            this.posicion[50].setIcon(new ImageIcon(getClass().getResource("/img/p1.png") )); // Pone al jugador en la casilla ganadora
                            JOptionPane.showMessageDialog(null, "El jugador 1 Gano"); // Muestra ventana
                            this.ganar = true; // sE MARCA GANADOR
                            return; // Sale de la funcion por si acaso
                            
                        }
                        if(cont == avanzar) // Si contador cuenta llega a los pasos que debe avanzar
                        {
                            this.posicion[this.actual1].setIcon(null); // Borra imagen en la posicion inicial
                            this.posicion[this.actual1].revalidate();
                            // Notifica en consola
                            System.out.println("Jugador " + this.jugador +" Avanzo " + avanzar);
                           System.out.println("Matriz["+i+"]["+j+"]");
                            System.out.println("Matriz["+r+"]["+c+"]");
                            this.actual1 += avanzar; // suma lo que avanzara
                            // Si encuentra una escalera que son las siguiente
                            // Sube el jugador a donde indica la escalera
                            if(this.actual1 == 6) 
                            {
                                System.out.println("Escalera 6 -> 14");
                                JOptionPane.showMessageDialog(null, "Escalera 6 -> 14");
                                this.matriz[i][j] = 0;
                                this.matriz[1][5] = 1;
                                this.posicion[14].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 14;
                                return;
                            }
                            else if(this.actual1 == 17)
                            {
                                System.out.println("Escalera 17 -> 23");
                                JOptionPane.showMessageDialog(null, "Escalera 17 -> 23");
                                this.matriz[i][j] = 0;
                                this.matriz[2][4] = 1;
                                this.posicion[23].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 23;
                                return;
                            }
                            else if(this.actual1 == 27)
                            {
                                System.out.println("Escalera 27 -> 33");
                                JOptionPane.showMessageDialog(null, "Escalera 27 -> 33");
                                this.matriz[i][j] = 0;
                                this.matriz[3][2] = 1;
                                this.posicion[33].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 33;
                                return;
                            }
                            else if(this.actual1 == 38)
                            {
                                System.out.println("Escalera 38 -> 43");
                                JOptionPane.showMessageDialog(null, "Escalera 38 -> 43");
                                this.matriz[i][j] = 0;
                                this.matriz[4][2] = 1;
                                this.posicion[43].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 43;
                                return;
                            }
                            
                             // Si encuentra una serpiente que son las siguiente
                            // baja el jugador a donde indica la escalera
                            else if(this.actual1 == 16)
                            {
                                System.out.println("Serpiente 16 -> 3");
                                JOptionPane.showMessageDialog(null, "Serpiente 16 -> 3");
                                this.matriz[i][j] = 0;
                                this.matriz[0][2] = 1;
                                this.posicion[3].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 3;
                                return;
                            }
                            else if(this.actual1 == 29)
                            {
                                System.out.println("Serpiente 29 -> 10");
                                JOptionPane.showMessageDialog(null, "Serpiente 29 -> 10");
                                this.matriz[i][j] = 0;
                                this.matriz[0][9] = 1;
                                this.posicion[10].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 10;
                                return;
                            }
                            else if(this.actual1 == 39)
                            {
                                System.out.println("Serpiente 39 -> 20");
                                JOptionPane.showMessageDialog(null, "Serpiente 39 -> 20");
                                this.matriz[i][j] = 0;
                                this.matriz[1][9] = 1;
                                this.posicion[20].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 20;
                                return;
                            }
                            else if(this.actual1 == 45)
                            {
                                System.out.println("Serpiente 45 -> 34");
                                JOptionPane.showMessageDialog(null, "Serpiente 45 -> 34");
                                this.matriz[i][j] = 0;
                                this.matriz[3][3] = 1;
                                this.posicion[34].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 34;
                                return;
                            }
                            else
                            {
                                if(matriz[r][c]==0)
                                {    
                                System.out.println("Normal 1");
                                this.matriz[i][j] = 0;
                                this.matriz[r][c] = 1;
                                System.out.println(this.actual1);
                                this.posicion[this.actual1].setIcon(new ImageIcon(getClass().getResource("/img/p1.png") ));
                                return;
                                }else
                                {
                                   System.out.println("Normal 2");
                                this.matriz[i][j] = 0;
                                this.matriz[r][c] = 3;
                                System.out.println(this.actual1);
                                this.posicion[this.actual1].setIcon(new ImageIcon(getClass().getResource("/img/p3.png") ));
                                return; 
                                }
                            }
                        }
                        
                        if(r<5)
                        {
                            
                            c = -1;
                            r++;
                        }
                        
                    }
                }
                // Se repite lo mismo que en el jugador 1 pero con los datos del jugador 2
                if(matriz[i][j] == 2 && this.jugador == false)
                {
                    
                        //System.out.println("Jugador 2!");
                        int cont = 0, c=j,r=i;
                    while(cont < avanzar)
                    {
                        while(c+1 < 10 && cont < avanzar)
                        {
                            //System.out.println(cont);
                            c++;
                            cont++; 
                        }
                        if(r+1>=5 && (this.actual2+avanzar)>=50)
                        {   
                            this.posicion[this.actual2].setIcon(null);
                            this.posicion[this.actual2].revalidate();
                            
                            //System.out.println(r);
                            //System.out.println("Jugador " + this.jugador +" Gano ");
                            this.posicion[50].setIcon(new ImageIcon(getClass().getResource("/img/p2.png") ));
                            JOptionPane.showMessageDialog(null, "El jugador 2 Gano");
                            this.ganar = true;
                            return;
                            
                        }
                        if(cont == avanzar)
                        {
                            this.posicion[this.actual2].setIcon(null);
                            this.posicion[this.actual2].revalidate();
                            System.out.println("Jugador " + this.jugador +" Avanzo " + avanzar);
                           System.out.println("Matriz["+i+"]["+j+"]");
                            System.out.println("Matriz["+r+"]["+c+"]");
                            this.actual2 += avanzar;
                            if(this.actual2 == 6)
                            {
                                System.out.println("Escalera 6 -> 14");
                                JOptionPane.showMessageDialog(null, "Escalera 6 -> 14");
                                this.matriz[i][j] = 0;
                                this.matriz[1][5] = 2;
                                this.posicion[14].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 14;
                                return;
                            }
                            else if(this.actual2 == 17)
                            {
                                System.out.println("Escalera 17 -> 23");
                                JOptionPane.showMessageDialog(null, "Escalera 17 -> 23");
                                this.matriz[i][j] = 0;
                                this.matriz[2][4] = 2;
                                this.posicion[23].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 23;
                                return;
                            }
                            else if(this.actual2 == 27)
                            {
                                System.out.println("Escalera 27 -> 33");
                                JOptionPane.showMessageDialog(null, "Escalera 27 -> 33");
                                this.matriz[i][j] = 0;
                                this.matriz[3][2] = 2;
                                this.posicion[33].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 33;
                                return;
                            }
                            else if(this.actual2 == 38)
                            {
                                System.out.println("Escalera 38 -> 43");
                                JOptionPane.showMessageDialog(null, "Escalera 38 -> 43");
                                this.matriz[i][j] = 0;
                                this.matriz[4][2] = 2;
                                this.posicion[43].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 43;
                                return;
                            } // SERPIENTES
                            else if(this.actual2 == 16)
                            {
                                System.out.println("Serpiente 16 -> 3");
                                JOptionPane.showMessageDialog(null, "Serpiente 16 -> 3");
                                this.matriz[i][j] = 0;
                                this.matriz[0][2] = 2;
                                this.posicion[3].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 3;
                                return;
                            }
                            else if(this.actual2 == 29)
                            {
                                System.out.println("Serpiente 29 -> 10");
                                JOptionPane.showMessageDialog(null, "Serpiente 29 -> 10");
                                this.matriz[i][j] = 0;
                                this.matriz[0][9] = 2;
                                this.posicion[10].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 10;
                                return;
                            }
                            else if(this.actual2 == 39)
                            {
                                System.out.println("Serpiente 39 -> 20");
                                JOptionPane.showMessageDialog(null, "Serpiente 39 -> 20");
                                this.matriz[i][j] = 0;
                                this.matriz[1][9] = 2;
                                this.posicion[20].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 20;
                                return;
                            }
                            else if(this.actual2 == 45)
                            {
                                System.out.println("Serpiente 45 -> 34");
                                JOptionPane.showMessageDialog(null, "Serpiente 45 -> 34");
                                this.matriz[i][j] = 0;
                                this.matriz[3][3] = 2;
                                this.posicion[34].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 34;
                                return;
                            }
                            else
                            {
                                if(matriz[r][c]==0)
                                {    
                                System.out.println("Normal 1 j");
                                this.matriz[i][j] = 0;
                                this.matriz[r][c] = 2;
                                System.out.println(this.actual2);
                                this.posicion[this.actual2].setIcon(new ImageIcon(getClass().getResource("/img/p2.png") ));
                                return;
                                }else
                                {
                                   System.out.println("Normal 2 j");
                                this.matriz[i][j] = 0;
                                this.matriz[r][c] = 3;
                                System.out.println(this.actual2);
                                this.posicion[this.actual2].setIcon(new ImageIcon(getClass().getResource("/img/p3.png") ));
                                return; 
                                }
                            }
                        }
                        
                        if(r<5)
                        {
                            
                            c = -1;
                            r++;
                        }
                        
                    }
                }
                // Si hay ambos jugadores en el mismo lugar
                if(matriz[i][j] == 3)
                {
                    if(this.jugador) // Si es el turno del jugador 1
                    {
                        if(!this.primero) // y no ha sido el primer movimiento del juego
                        {
                            // Repite la logica del jugador 1 pero en vez de dejar un 0 en donde estaba, deja un 2, indicando que el jugador 2 sigue en esa casilla 
                            int cont = 0, c=j,r=i;
                    while(cont < avanzar)
                    {
                        while(c+1 < 10 && cont < avanzar)
                        {
                            //System.out.println(cont);
                            c++;
                            cont++; 
                        }
                        if(r+1>=5 && (this.actual1+avanzar)>=50)
                        {   
                            this.posicion[this.actual1].setIcon(null);
                            this.posicion[this.actual1].revalidate();
                            
                            //System.out.println(r);
                            //System.out.println("Jugador " + this.jugador +" Gano ");
                            this.posicion[50].setIcon(new ImageIcon(getClass().getResource("/img/p1.png") ));
                            JOptionPane.showMessageDialog(null, "El jugador 1 Gano");
                            this.ganar = true;
                            return;
                            
                        }
                        if(cont == avanzar)
                        {
                             this.posicion[1].setIcon(new ImageIcon(getClass().getResource("/img/p2.png") ));
                            System.out.println("Jugador " + this.jugador +" Avanzo " + avanzar);
                           System.out.println("Matriz["+i+"]["+j+"]");
                            System.out.println("Matriz["+r+"]["+c+"]");
                            this.actual1 += avanzar;
                            if(this.actual1 == 6)
                            {
                                System.out.println("Escalera 6 -> 14");
                                JOptionPane.showMessageDialog(null, "Escalera 6 -> 14");
                                this.matriz[i][j] = 2;
                                this.matriz[1][5] = 1;
                                this.posicion[14].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 14;
                                return;
                            }
                            else if(this.actual1 == 17)
                            {
                                System.out.println("Escalera 17 -> 23");
                                JOptionPane.showMessageDialog(null, "Escalera 17 -> 23");
                                this.matriz[i][j] = 2;
                                this.matriz[2][4] = 1;
                                this.posicion[23].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 23;
                                return;
                            }
                            else if(this.actual1 == 27)
                            {
                                System.out.println("Escalera 27 -> 33");
                                JOptionPane.showMessageDialog(null, "Escalera 27 -> 33");
                                this.matriz[i][j] = 2;
                                this.matriz[3][2] = 1;
                                this.posicion[33].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 33;
                                return;
                            }
                            else if(this.actual1 == 38)
                            {
                                System.out.println("Escalera 38 -> 43");
                                JOptionPane.showMessageDialog(null, "Escalera 38 -> 43");
                                this.matriz[i][j] = 2;
                                this.matriz[4][2] = 1;
                                this.posicion[43].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 43;
                                return;
                            } // SERPIENTES
                            else if(this.actual1 == 16)
                            {
                                System.out.println("Serpiente 16 -> 3");
                                JOptionPane.showMessageDialog(null, "Serpiente 16 -> 3");
                                this.matriz[i][j] = 2;
                                this.matriz[0][2] = 1;
                                this.posicion[3].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 3;
                                return;
                            }
                            else if(this.actual1 == 29)
                            {
                                System.out.println("Serpiente 29 -> 10");
                                JOptionPane.showMessageDialog(null, "Serpiente 29 -> 10");
                                this.matriz[i][j] = 2;
                                this.matriz[0][9] = 1;
                                this.posicion[10].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 10;
                                return;
                            }
                            else if(this.actual1 == 39)
                            {
                                System.out.println("Serpiente 39 -> 20");
                                JOptionPane.showMessageDialog(null, "Serpiente 39 -> 20");
                                this.matriz[i][j] = 2;
                                this.matriz[1][9] = 1;
                                this.posicion[20].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 20;
                                return;
                            }
                            else if(this.actual1 == 45)
                            {
                                System.out.println("Serpiente 45 -> 34");
                                JOptionPane.showMessageDialog(null, "Serpiente 45 -> 34");
                                this.matriz[i][j] = 2;
                                this.matriz[3][3] = 1;
                                this.posicion[34].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 34;
                                return;
                            }
                            else
                            {
                                  
                                System.out.println("Normal 1");
                                this.matriz[i][j] = 2;
                                this.matriz[r][c] = 1;
                                System.out.println(this.actual1);
                                this.posicion[this.actual1].setIcon(new ImageIcon(getClass().getResource("/img/p1.png") ));
                                return;
                               
                            }
                        }
                        
                        if(r<5)
                        {
                            
                            c = -1;
                            r++;
                        }
                        
                    } //fin
                            
                            this.primero = true; // SE MARCA QUE YA SE HIZO EL PRIMER MOVIMIENTO DEL JUEGO
                        }
                        else // EN CASO DE QUE YA SE DIO EL PRIMER MOVIMIENTO SE REPITE LA LOGICA DEL JUGADOR 1 NORMAL
                        {
                            int cont = 0, c=j,r=i; // inicia un contador de pasos que da, y columnas y renglones
                    while(cont < avanzar) // Mientras el contador sea menor al total que hay que avanzar
                    {
                        while(c+1 < 10 && cont < avanzar) // Recorre la fila hasta el final 
                        {
                            //System.out.println(cont);
                            c++; // Marca el numero de columna donde esta
                            cont++; // Cuenta los pasos que da
                        }
                        if(r+1>=5 && (this.actual1+avanzar)>=50) // Si ya esta en la ultima fila y lo que va a vanzar supera la ultima poscsicion
                        {   
                            this.posicion[this.actual1].setIcon(null); // Borra la imagen en la posicion inicial
                            this.posicion[this.actual1].revalidate();
                            
                            //System.out.println(r);
                            //System.out.println("Jugador " + this.jugador +" Gano ");
                            this.posicion[50].setIcon(new ImageIcon(getClass().getResource("/img/p1.png") )); // Pone al jugador en la casilla ganadora
                            JOptionPane.showMessageDialog(null, "El jugador 1 Gano"); // Muestra ventana
                            this.ganar = true; // sE MARCA GANADOR
                            return; // Sale de la funcion por si acaso
                            
                        }
                        if(cont == avanzar) // Si contador cuenta llega a los pasos que debe avanzar
                        {
                            this.posicion[this.actual1].setIcon(null); // Borra imagen en la posicion inicial
                            this.posicion[this.actual1].revalidate();
                            // Notifica en consola
                            System.out.println("Jugador " + this.jugador +" Avanzo " + avanzar);
                           System.out.println("Matriz["+i+"]["+j+"]");
                            System.out.println("Matriz["+r+"]["+c+"]");
                            this.actual1 += avanzar; // suma lo que avanzara
                            // Si encuentra una escalera que son las siguiente
                            // Sube el jugador a donde indica la escalera
                            if(this.actual1 == 6) 
                            {
                                System.out.println("Escalera 6 -> 14");
                                JOptionPane.showMessageDialog(null, "Escalera 6 -> 14");
                                this.matriz[i][j] = 0;
                                this.matriz[1][5] = 1;
                                this.posicion[14].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 14;
                                return;
                            }
                            else if(this.actual1 == 17)
                            {
                                System.out.println("Escalera 17 -> 23");
                                JOptionPane.showMessageDialog(null, "Escalera 17 -> 23");
                                this.matriz[i][j] = 0;
                                this.matriz[2][4] = 1;
                                this.posicion[23].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 23;
                                return;
                            }
                            else if(this.actual1 == 27)
                            {
                                System.out.println("Escalera 27 -> 33");
                                JOptionPane.showMessageDialog(null, "Escalera 27 -> 33");
                                this.matriz[i][j] = 0;
                                this.matriz[3][2] = 1;
                                this.posicion[33].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 33;
                                return;
                            }
                            else if(this.actual1 == 38)
                            {
                                System.out.println("Escalera 38 -> 43");
                                JOptionPane.showMessageDialog(null, "Escalera 38 -> 43");
                                this.matriz[i][j] = 0;
                                this.matriz[4][2] = 1;
                                this.posicion[43].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 43;
                                return;
                            }
                            
                             // Si encuentra una serpiente que son las siguiente
                            // baja el jugador a donde indica la escalera
                            else if(this.actual1 == 16)
                            {
                                System.out.println("Serpiente 16 -> 3");
                                JOptionPane.showMessageDialog(null, "Serpiente 16 -> 3");
                                this.matriz[i][j] = 0;
                                this.matriz[0][2] = 1;
                                this.posicion[3].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 3;
                                return;
                            }
                            else if(this.actual1 == 29)
                            {
                                System.out.println("Serpiente 29 -> 10");
                                JOptionPane.showMessageDialog(null, "Serpiente 29 -> 10");
                                this.matriz[i][j] = 0;
                                this.matriz[0][9] = 1;
                                this.posicion[10].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 10;
                                return;
                            }
                            else if(this.actual1 == 39)
                            {
                                System.out.println("Serpiente 39 -> 20");
                                JOptionPane.showMessageDialog(null, "Serpiente 39 -> 20");
                                this.matriz[i][j] = 0;
                                this.matriz[1][9] = 1;
                                this.posicion[20].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 20;
                                return;
                            }
                            else if(this.actual1 == 45)
                            {
                                System.out.println("Serpiente 45 -> 34");
                                JOptionPane.showMessageDialog(null, "Serpiente 45 -> 34");
                                this.matriz[i][j] = 0;
                                this.matriz[3][3] = 1;
                                this.posicion[34].setIcon(new ImageIcon(getClass().getResource("/img/p1.png")));
                                this.actual1 = 34;
                                return;
                            }
                            else
                            {
                                if(matriz[r][c]==0)
                                {    
                                System.out.println("Normal 1");
                                this.matriz[i][j] = 0;
                                this.matriz[r][c] = 1;
                                System.out.println(this.actual1);
                                this.posicion[this.actual1].setIcon(new ImageIcon(getClass().getResource("/img/p1.png") ));
                                return;
                                }else
                                {
                                   System.out.println("Normal 2");
                                this.matriz[i][j] = 0;
                                this.matriz[r][c] = 3;
                                System.out.println(this.actual1);
                                this.posicion[this.actual1].setIcon(new ImageIcon(getClass().getResource("/img/p3.png") ));
                                return; 
                                }
                            }
                        }
                        
                        if(r<5)
                        {
                            
                            c = -1;
                            r++;
                        }
                        
                    }
                        }
                    }
                    else // EN CASO DE QUE SEA EL JUGADOR 2 SE REPITE LA LOGICA DEL JUGADOR 2 
                    {
                        int cont = 0, c=j,r=i;
                    while(cont < avanzar)
                    {
                        while(c+1 < 10 && cont < avanzar)
                        {
                            //System.out.println(cont);
                            c++;
                            cont++; 
                        }
                        if(r+1>=5 && (this.actual2+avanzar)>=50)
                        {   
                            this.posicion[this.actual2].setIcon(null);
                            this.posicion[this.actual2].revalidate();
                            
                            //System.out.println(r);
                            //System.out.println("Jugador " + this.jugador +" Gano ");
                            this.posicion[50].setIcon(new ImageIcon(getClass().getResource("/img/p2.png") ));
                            JOptionPane.showMessageDialog(null, "El jugador 2 Gano");
                            this.ganar = true;
                            return;
                            
                        }
                        if(cont == avanzar)
                        {
                            this.posicion[this.actual2].setIcon(null);
                            this.posicion[this.actual2].revalidate();
                            System.out.println("Jugador " + this.jugador +" Avanzo " + avanzar);
                           System.out.println("Matriz["+i+"]["+j+"]");
                            System.out.println("Matriz["+r+"]["+c+"]");
                            this.actual2 += avanzar;
                            if(this.actual2 == 6)
                            {
                                System.out.println("Escalera 6 -> 14");
                                JOptionPane.showMessageDialog(null, "Escalera 6 -> 14");
                                this.matriz[i][j] = 0;
                                this.matriz[1][5] = 2;
                                this.posicion[14].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual1 = 14;
                                return;
                            }
                            else if(this.actual2 == 17)
                            {
                                System.out.println("Escalera 17 -> 23");
                                JOptionPane.showMessageDialog(null, "Escalera 17 -> 23");
                                this.matriz[i][j] = 0;
                                this.matriz[2][4] = 2;
                                this.posicion[23].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 23;
                                return;
                            }
                            else if(this.actual2 == 27)
                            {
                                System.out.println("Escalera 27 -> 33");
                                JOptionPane.showMessageDialog(null, "Escalera 27 -> 33");
                                this.matriz[i][j] = 0;
                                this.matriz[3][2] = 2;
                                this.posicion[33].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 33;
                                return;
                            }
                            else if(this.actual2 == 38)
                            {
                                System.out.println("Escalera 38 -> 43");
                                JOptionPane.showMessageDialog(null, "Escalera 38 -> 43");
                                this.matriz[i][j] = 0;
                                this.matriz[4][2] = 2;
                                this.posicion[43].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 43;
                                return;
                            } // SERPIENTES
                            else if(this.actual2 == 16)
                            {
                                System.out.println("Serpiente 16 -> 3");
                                JOptionPane.showMessageDialog(null, "Serpiente 16 -> 3");
                                this.matriz[i][j] = 0;
                                this.matriz[0][2] = 2;
                                this.posicion[3].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 3;
                                return;
                            }
                            else if(this.actual2 == 29)
                            {
                                System.out.println("Serpiente 29 -> 10");
                                JOptionPane.showMessageDialog(null, "Serpiente 29 -> 10");
                                this.matriz[i][j] = 0;
                                this.matriz[0][9] = 2;
                                this.posicion[10].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 10;
                                return;
                            }
                            else if(this.actual2 == 39)
                            {
                                System.out.println("Serpiente 39 -> 20");
                                JOptionPane.showMessageDialog(null, "Serpiente 39 -> 20");
                                this.matriz[i][j] = 0;
                                this.matriz[1][9] = 2;
                                this.posicion[20].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 20;
                                return;
                            }
                            else if(this.actual2 == 45)
                            {
                                System.out.println("Serpiente 45 -> 34");
                                JOptionPane.showMessageDialog(null, "Serpiente 45 -> 34");
                                this.matriz[i][j] = 0;
                                this.matriz[3][3] = 2;
                                this.posicion[34].setIcon(new ImageIcon(getClass().getResource("/img/p2.png")));
                                this.actual2 = 34;
                                return;
                            }
                            else
                            {
                                if(matriz[r][c]==0)
                                {    
                                System.out.println("Normal 1 j");
                                this.matriz[i][j] = 0;
                                this.matriz[r][c] = 2;
                                System.out.println(this.actual2);
                                this.posicion[this.actual2].setIcon(new ImageIcon(getClass().getResource("/img/p2.png") ));
                                return;
                                }else
                                {
                                   System.out.println("Normal 2 j");
                                this.matriz[i][j] = 0;
                                this.matriz[r][c] = 3;
                                System.out.println(this.actual2);
                                this.posicion[this.actual2].setIcon(new ImageIcon(getClass().getResource("/img/p3.png") ));
                                return; 
                                }
                            }
                        }
                        
                        if(r<5)
                        {
                            
                            c = -1;
                            r++;
                        }
                        
                    }
                    }
                }
            }
        }    
    }       
}
    // Recorre el arreglo de etiquetas y cambia su contenido por nada
 public void inicializarPosiciones()
 {
    
    this.matriz[0][0] = 3;
    //this.matriz[2][5] = 2;
    this.actual1 = 1;
    this.actual2 = 1;
    
    /*
    for(int i = 0; i<5;i++){
        for(int j = 0; j<10;j++)
            System.out.print(this.matriz[i][j]);
     System.out.println();
    }*/
    for(int i =1 ; i<51 ;i++)
        posicion[i].setText("");
    this.posicion[1].setIcon(new ImageIcon(getClass().getResource("/img/p3.png") ));
    
 }
 
 
 // Guarda cada etiqueta en una posicion del arreglo segun el numero de etiqueta
 public void guardarPosiciones()
 {
     this.posicion[1] = this.pos1;
     this.posicion[2] = this.pos2;
     this.posicion[3] = this.pos3;
     this.posicion[4] = this.pos4;
     this.posicion[5] = this.pos5;
     this.posicion[6] = this.pos6;
     this.posicion[7] = this.pos7;
     this.posicion[8] = this.pos8;
     this.posicion[9] = this.pos9;
     this.posicion[10] = this.pos10;
     this.posicion[11] = this.pos11;
     this.posicion[12] = this.pos12;
     this.posicion[13] = this.pos13;
     this.posicion[14] = this.pos14;
     this.posicion[15] = this.pos15;
     this.posicion[16] = this.pos16;
     this.posicion[17] = this.pos17;
     this.posicion[18] = this.pos18;
     this.posicion[19] = this.pos19;
     this.posicion[20] = this.pos20;
     this.posicion[21] = this.pos21;
     this.posicion[22] = this.pos22;
     this.posicion[23] = this.pos23;
     this.posicion[24] = this.pos24;
     this.posicion[25] = this.pos25;
     this.posicion[26] = this.pos26;
     this.posicion[27] = this.pos27;
     this.posicion[28] = this.pos28;
     this.posicion[29] = this.pos29;
     this.posicion[30] = this.pos30;
     this.posicion[31] = this.pos31;
     this.posicion[32] = this.pos32;
     this.posicion[33] = this.pos33;
     this.posicion[34] = this.pos34;
     this.posicion[35] = this.pos35;
     this.posicion[36] = this.pos36;
     this.posicion[37] = this.pos37;
     this.posicion[38] = this.pos38;
     this.posicion[39] = this.pos39;
     this.posicion[40] = this.pos40;
     this.posicion[41] = this.pos41;
     this.posicion[42] = this.pos42;
     this.posicion[43] = this.pos43;
     this.posicion[44] = this.pos44;
     this.posicion[45] = this.pos45;
     this.posicion[46] = this.pos46;
     this.posicion[47] = this.pos47;
     this.posicion[48] = this.pos48;
     this.posicion[49] = this.pos49;
     this.posicion[50] = this.pos50;  
 }
}
